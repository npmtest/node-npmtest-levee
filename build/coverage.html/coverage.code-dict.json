{"/home/travis/build/npmtest/node-npmtest-levee/test.js":"/* istanbul instrument in package npmtest_levee */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-levee/lib.npmtest_levee.js":"/* istanbul instrument in package npmtest_levee */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_levee = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_levee = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-levee/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-levee && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_levee */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_levee\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_levee.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_levee.rollup.js'] =\n            local.assetsDict['/assets.npmtest_levee.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_levee.__dirname + '/lib.npmtest_levee.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-levee/node_modules/levee/index.js":"'use strict';\n\nvar Assert = require('assert');\nvar Breaker = require('./lib/breaker');\nvar Stats = require('./lib/stats');\n\n\nexports.Breaker = Breaker;\nexports.Stats = Stats;\n\n\nexports.createBreaker = function createBreaker(impl, options) {\n    if (typeof impl === 'function') {\n        impl = { execute: impl };\n    }\n\n    return new Breaker(impl, options);\n};\n\n\nexports.createStats = function createStats(command) {\n    var stats;\n\n    Assert.ok(command instanceof Breaker, 'Stats can only be created for Breaker instances.');\n\n    stats = new Stats();\n\n    command.on('execute', stats.increment.bind(stats, 'executions'));\n    command.on('reject',  stats.increment.bind(stats, 'rejections'));\n    command.on('success', stats.increment.bind(stats, 'successes'));\n    command.on('failure', stats.increment.bind(stats, 'failures'));\n    command.on('timeout', stats.increment.bind(stats, 'timeouts'));\n    command.on('duration', stats.sample.bind(stats, 'duration'));\n\n    return stats;\n};\n","/home/travis/build/npmtest/node-npmtest-levee/node_modules/levee/lib/breaker.js":"'use strict';\n\nvar Util = require('util');\nvar Hoek = require('hoek');\nvar Events = require('events');\nvar Assert = require('assert');\nvar Zalgo = require('./zalgo');\nvar Defaults = require('./defaults');\n\n\nfunction Breaker(impl, options) {\n    Events.EventEmitter.call(this);\n\n    Assert.equal(typeof impl, 'object', 'The command implementation must be an object.');\n    Assert.equal(typeof impl.execute, 'function', 'The command implementation must have a method named `execute`.');\n\n    this.settings = Hoek.applyToDefaults(Defaults.Breaker, options || {});\n    this.fallback = undefined;\n\n    this._impl = impl;\n    this._state = Breaker.State.CLOSE;\n    this._numFailures = 0;\n    this._pendingClose = false;\n    this._resetTimer = undefined;\n\n    this.on('open', this._startTimer);\n}\n\nUtil.inherits(Breaker, Events.EventEmitter);\n\nBreaker.State = Object.freeze({\n    OPEN: 'OPEN',\n    HALF_OPEN: 'HALF_OPEN',\n    CLOSE: 'CLOSE'\n});\n\n\nBreaker.prototype.run = function run(/*args...n, callback*/) {\n    var args, self, fallback, orig;\n\n    args = Array.prototype.slice.call(arguments);\n    self = this;\n    fallback = this.fallback;\n\n    if (fallback instanceof Breaker) {\n        orig = args.slice();\n        args[args.length - 1] = function wrapper(err/*, ...data*/) {\n            var callback;\n\n            if (err && self.isOpen()) {\n                fallback.run.apply(fallback, orig);\n                return;\n            }\n\n            callback = orig.pop();\n            callback.apply(null, arguments);\n        };\n    }\n\n    this._run.apply(this, args);\n};\n\n\nBreaker.prototype._run = function _run(/*args...n, callback*/) {\n    var args, callback, self, start, timer, execute;\n\n    this.emit('execute');\n\n    args = Array.prototype.slice.call(arguments);\n    callback = args.pop();\n\n    if (this.isOpen() || this._pendingClose) {\n        this.emit('reject');\n        callback(new Error('Command not available.'));\n        return;\n    }\n\n    if (this.isHalfOpen()) {\n        // Flip the flag to disallow additional calls at this time.\n        // It doesn't matter if any in-flight calls come back before\n        // this call completes because if the in-flight ones timeout\n        // or fail, the command still isn't healthy so we flip back\n        // to `open`. If they succeed we optimistically flip back to\n        // `closed` and this call can continue as normal.\n        this._pendingClose = true;\n    }\n\n    self = this;\n    start = Date.now();\n\n    timer = setTimeout(function ontimeout() {\n        var error = new Error('Command timeout.');\n        error.name = 'commandTimeout';\n        error.code = 'ETIMEDOUT';\n        timer = undefined;\n        self._pendingClose = false;\n        self.emit('timeout');\n        self._onFailure();\n        callback(error);\n    }, this.settings.timeout);\n\n    timer.unref();\n\n    args[args.length] = function onreponse(err/*, ...data*/) {\n        if (!timer) { return; }\n\n        clearTimeout(timer);\n        timer = undefined;\n\n        self._pendingClose = false;\n        self.emit('duration', Date.now() - start);\n\n        if (err && self.settings.isFailure(err)) {\n            self.emit('failure', err);\n            self._onFailure();\n        } else {\n            self.emit('success');\n            self.close();\n        }\n\n        callback.apply(null, arguments);\n    };\n\n\n    execute = Zalgo.contain(this._impl.execute, this._impl);\n    execute.apply(null, args);\n};\n\n\nBreaker.prototype.isOpen = function isOpen() {\n    return this._state === Breaker.State.OPEN;\n};\n\n\nBreaker.prototype.isHalfOpen = function isHalfOpen() {\n    return this._state === Breaker.State.HALF_OPEN;\n};\n\n\nBreaker.prototype.isClosed = function isClosed() {\n    return this._state === Breaker.State.CLOSE;\n};\n\n\nBreaker.prototype.open = function open() {\n    this._setState(Breaker.State.OPEN);\n};\n\n\nBreaker.prototype.halfOpen = function halfOpen() {\n    this._setState(Breaker.State.HALF_OPEN);\n};\n\n\nBreaker.prototype.close = function close() {\n    this._numFailures = 0;\n    this._setState(Breaker.State.CLOSE);\n};\n\n\nBreaker.prototype._setState = function _setState(state) {\n    if (state in Breaker.State && this._state !== state) {\n        this._state = state;\n        this.emit(state.toLowerCase());\n    }\n};\n\n\nBreaker.prototype._onFailure = function _onFailure() {\n    this._numFailures += 1;\n    if (this.isHalfOpen() || this._numFailures >= this.settings.maxFailures) {\n        this.open();\n    }\n};\n\n\nBreaker.prototype._startTimer = function _startTimer() {\n    this._resetTimer = setTimeout(this.halfOpen.bind(this), this.settings.resetTimeout);\n    this._resetTimer.unref();\n};\n\n\nmodule.exports = Breaker;\n","/home/travis/build/npmtest/node-npmtest-levee/node_modules/levee/lib/zalgo.js":"'use strict';\n\n\nexports.contain = function contain(fn, context) {\n    return function zalgo() {\n        var callback, sync;\n\n        function __container__() {\n            var args;\n\n            if (sync) {\n                args = arguments;\n                process.nextTick(function () {\n                    callback.apply(null, args);\n                });\n            } else {\n                callback.apply(null, arguments);\n            }\n        }\n\n        // Defend against re-wrapping callbacks\n        callback = arguments[arguments.length - 1];\n        if (callback.name !== __container__.name) {\n            arguments[arguments.length - 1] = __container__;\n        }\n\n        sync = true;\n        fn.apply(context || this, arguments);\n        sync = false;\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-levee/node_modules/levee/lib/defaults.js":"'use strict';\n\n\nexports.Breaker = {\n    maxFailures: 5,\n    timeout: 10000,\n    resetTimeout: 60000,\n    isFailure: function () {\n      return true;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-levee/node_modules/levee/lib/stats.js":"'use strict';\n\nvar Hoek = require('hoek');\n\n\nfunction avg(arr) {\n    var i, len, total;\n\n    for (i = 0, len = arr.length, total = 0; i < len; i++) {\n        total += arr[i];\n    }\n\n    // No 'divide by zero' check. I'm cool with 'Infinity'\n    return total / arr.length;\n}\n\n\nfunction Stats() {\n    this._counts = Object.create(null);\n    this._samples = Object.create(null);\n}\n\n\nStats.prototype = {\n\n\n    increment: function increment(name) {\n        if (!(name in this._counts)) {\n            this.resetCounts(name);\n        }\n        this._counts[name] += 1;\n    },\n\n\n    decrement: function decrement(name) {\n        if (name in this._counts) {\n            this._counts[name] -= 1;\n        }\n    },\n\n\n    sample: function sample(name, data) {\n        if (!(name in this._samples)) {\n            this.resetSamples(name);\n        }\n        this._samples[name].push(data);\n    },\n\n\n    reset: function reset() {\n        this.resetCounts();\n        this.resetSamples();\n    },\n\n\n    resetCounts: function resetCounts(name) {\n        if (!name) {\n            Object.keys(this._counts).forEach(resetCounts, this);\n            return;\n        }\n        this._counts[name] = 0;\n    },\n\n\n    resetSamples: function resetSamples(name) {\n        if (!name) {\n            Object.keys(this._samples).forEach(resetSamples, this);\n            return;\n        }\n        this._samples[name] = [];\n    },\n\n\n    snapshot: function snapshot() {\n        var counts, samples;\n\n        counts = Hoek.clone(this._counts);\n        samples = this._samples;\n\n        return {\n            counts: counts,\n            samples: Object.keys(samples).reduce(function (obj, prop) {\n                var data;\n\n                data = samples[prop];\n\n                obj[prop] = {\n                    average: avg(data),\n                    count: data.length\n                };\n\n                return obj;\n            }, {})\n        };\n    }\n\n};\n\nmodule.exports = Stats;\n"}